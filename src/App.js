import { useState } from "react";
import Navbar from "./components/navbar";
import styles from "./styles/app.module.css";
import { data } from "./components/data";
import WorkCard from "./components/workCard";
function App() {
  const [activeTab, setActiveTab] = useState("completed");
  const [items, setItems] = useState(data.filter((item) => item.completed));

  //function to filter bounties
  const filterFunction = function (e) {
    const newItems =
      activeTab === "completed"
        ? data.filter((item) => item.completed)
        : data.filter((item) => !item.completed);
    if (e.target.value === "All") {
      setItems(newItems);
    } else if (e.target.value === "Design") {
      setItems(
        newItems.filter((item) => {
          if (item.category.indexOf("Design") > -1) {
            console.log("Design");
            return true;
          }
          return false;
        })
      );
    } else if (e.target.value === "Frontend") {
      setItems(
        newItems.filter((item) => {
          if (item.category.indexOf("Frontend") > -1) {
            return true;
          }
          return false;
        })
      );
    } else if (e.target.value === "Backend") {
      setItems(
        newItems.filter((item) => {
          if (item.category.indexOf("Backend") > -1) {
            return true;
          }
          return false;
        })
      );
    } else if (e.target.value === "Blockchain") {
      setItems(
        newItems.filter((item) => {
          if (item.category.indexOf("Blockchain") > -1) {
            return true;
          }
          return false;
        })
      );
    } else if (e.target.value === "Content") {
      setItems(
        newItems.filter((item) => {
          if (item.category.indexOf("Content") > -1) {
            return true;
          }
          return false;
        })
      );
    }
  };

  return (
    <div className="App">
      <Navbar />
      <div className={styles.body}>
        <div className={styles.main}>
          <div className={styles.tabDisplay}>
            <div className={styles.tabsOption}>
              <div className={styles.tabHeader}>Work History</div>
              <div className={styles.line1}></div>
              <div
                className={
                  activeTab === "completed"
                    ? styles.tabOptionActive
                    : styles.tabOption
                }
                onClick={() => {
                  setActiveTab("completed");
                  setItems(data.filter((item) => item.completed));
                }}
              >
                Completed
              </div>
              <div
                className={
                  activeTab === "pending"
                    ? styles.tabOptionActive
                    : styles.tabOption
                }
                onClick={() => {
                  setActiveTab("pending");
                  setItems(data.filter((item) => !item.completed));
                }}
              >
                In Review
              </div>
            </div>

            <div className={styles.filterDropdown}>
              <svg
                width="83"
                height="18"
                viewBox="0 0 83 18"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M0.75 4H15.25C15.4489 4 15.6397 4.07902 15.7803 4.21967C15.921 4.36032 16 4.55109 16 4.75C16 4.94891 15.921 5.13968 15.7803 5.28033C15.6397 5.42098 15.4489 5.5 15.25 5.5H0.75C0.551088 5.5 0.360322 5.42098 0.21967 5.28033C0.0790176 5.13968 0 4.94891 0 4.75C0 4.55109 0.0790176 4.36032 0.21967 4.21967C0.360322 4.07902 0.551088 4 0.75 4ZM3 8.75C3 8.55109 3.07902 8.36032 3.21967 8.21967C3.36032 8.07902 3.55109 8 3.75 8H12.25C12.4489 8 12.6397 8.07902 12.7803 8.21967C12.921 8.36032 13 8.55109 13 8.75C13 8.94891 12.921 9.13968 12.7803 9.28033C12.6397 9.42098 12.4489 9.5 12.25 9.5H3.75C3.55109 9.5 3.36032 9.42098 3.21967 9.28033C3.07902 9.13968 3 8.94891 3 8.75ZM6 12.75C6 12.5511 6.07902 12.3603 6.21967 12.2197C6.36032 12.079 6.55109 12 6.75 12H9.25C9.44891 12 9.63968 12.079 9.78033 12.2197C9.92098 12.3603 10 12.5511 10 12.75C10 12.9489 9.92098 13.1397 9.78033 13.2803C9.63968 13.421 9.44891 13.5 9.25 13.5H6.75C6.55109 13.5 6.36032 13.421 6.21967 13.2803C6.07902 13.1397 6 12.9489 6 12.75Z"
                  fill="#94A3B8"
                />
                <path
                  d="M25.233 14V3.81818H31.3381V4.91193H26.4659V8.35227H30.8807V9.44602H26.4659V14H25.233ZM33.8507 14V6.36364H35.024V14H33.8507ZM34.4473 5.09091C34.2186 5.09091 34.0214 5.01302 33.8556 4.85724C33.6932 4.70147 33.612 4.5142 33.612 4.29545C33.612 4.0767 33.6932 3.88944 33.8556 3.73366C34.0214 3.57789 34.2186 3.5 34.4473 3.5C34.6759 3.5 34.8715 3.57789 35.0339 3.73366C35.1996 3.88944 35.2825 4.0767 35.2825 4.29545C35.2825 4.5142 35.1996 4.70147 35.0339 4.85724C34.8715 5.01302 34.6759 5.09091 34.4473 5.09091ZM38.9062 3.81818V14H37.7329V3.81818H38.9062ZM44.9362 6.36364V7.35795H40.9788V6.36364H44.9362ZM42.1322 4.53409H43.3055V11.8125C43.3055 12.1439 43.3536 12.3925 43.4497 12.5582C43.5491 12.7206 43.6751 12.83 43.8276 12.8864C43.9833 12.9394 44.1474 12.9659 44.3197 12.9659C44.449 12.9659 44.5551 12.9593 44.6379 12.946C44.7208 12.9295 44.7871 12.9162 44.8368 12.9062L45.0754 13.9602C44.9959 13.9901 44.8848 14.0199 44.7423 14.0497C44.5998 14.0829 44.4192 14.0994 44.2004 14.0994C43.869 14.0994 43.5442 14.0282 43.226 13.8857C42.9111 13.7431 42.6493 13.526 42.4405 13.2344C42.235 12.9427 42.1322 12.5748 42.1322 12.1307V4.53409ZM50.3808 14.1591C49.645 14.1591 49.0103 13.9967 48.4767 13.6719C47.9464 13.3438 47.5371 12.8864 47.2487 12.2997C46.9637 11.7098 46.8211 11.0237 46.8211 10.2415C46.8211 9.45928 46.9637 8.76989 47.2487 8.1733C47.5371 7.57339 47.9381 7.10606 48.4518 6.77131C48.9689 6.43324 49.5721 6.2642 50.2615 6.2642C50.6592 6.2642 51.052 6.33049 51.4398 6.46307C51.8275 6.59564 52.1805 6.81108 52.4987 7.10938C52.8169 7.40436 53.0704 7.79545 53.2594 8.28267C53.4483 8.76989 53.5427 9.36979 53.5427 10.0824V10.5795H47.6564V9.56534H52.3496C52.3496 9.13447 52.2634 8.75 52.091 8.41193C51.922 8.07386 51.68 7.80705 51.3652 7.61151C51.0536 7.41596 50.6857 7.31818 50.2615 7.31818C49.7942 7.31818 49.3898 7.43419 49.0484 7.66619C48.7103 7.89489 48.4502 8.19318 48.2679 8.56108C48.0856 8.92898 47.9944 9.32339 47.9944 9.74432V10.4205C47.9944 10.9972 48.0939 11.486 48.2927 11.8871C48.4949 12.2848 48.775 12.5881 49.1329 12.7969C49.4909 13.0024 49.9068 13.1051 50.3808 13.1051C50.689 13.1051 50.9675 13.062 51.216 12.9759C51.4679 12.8864 51.685 12.7538 51.8673 12.5781C52.0496 12.3991 52.1905 12.1771 52.2899 11.9119L53.4234 12.2301C53.3041 12.6146 53.1036 12.9527 52.8219 13.2443C52.5401 13.5327 52.1921 13.758 51.7778 13.9205C51.3635 14.0795 50.8978 14.1591 50.3808 14.1591ZM55.8875 14V6.36364H57.0211V7.51705H57.1006C57.2398 7.1392 57.4917 6.83262 57.8563 6.5973C58.2209 6.36198 58.6319 6.24432 59.0892 6.24432C59.1754 6.24432 59.2831 6.24597 59.4124 6.24929C59.5417 6.2526 59.6394 6.25758 59.7057 6.2642V7.45739C59.6659 7.44744 59.5748 7.43253 59.4323 7.41264C59.2931 7.38944 59.1456 7.37784 58.9898 7.37784C58.6186 7.37784 58.2872 7.45573 57.9955 7.61151C57.7071 7.76397 57.4784 7.97609 57.3094 8.24787C57.1437 8.51634 57.0608 8.82292 57.0608 9.16761V14H55.8875ZM66.3131 14V3.81818H69.8728C70.582 3.81818 71.167 3.94081 71.6277 4.18608C72.0884 4.42803 72.4315 4.7545 72.6569 5.16548C72.8822 5.57315 72.9949 6.02557 72.9949 6.52273C72.9949 6.96023 72.917 7.3215 72.7613 7.60653C72.6088 7.89157 72.4066 8.11695 72.1547 8.28267C71.9061 8.44839 71.636 8.57102 71.3444 8.65057V8.75C71.6559 8.76989 71.9691 8.87926 72.284 9.07812C72.5989 9.27699 72.8624 9.56203 73.0745 9.93324C73.2866 10.3045 73.3927 10.7585 73.3927 11.2955C73.3927 11.8059 73.2767 12.2649 73.0446 12.6726C72.8126 13.0803 72.4464 13.4034 71.9459 13.642C71.4454 13.8807 70.7942 14 69.9921 14H66.3131ZM67.5461 12.9062H69.9921C70.7975 12.9062 71.3692 12.7505 71.7073 12.4389C72.0487 12.1241 72.2194 11.7429 72.2194 11.2955C72.2194 10.9508 72.1315 10.6326 71.9559 10.3409C71.7802 10.0459 71.53 9.81061 71.2052 9.63494C70.8803 9.45597 70.4959 9.36648 70.0517 9.36648H67.5461V12.9062ZM67.5461 8.29261H69.833C70.2042 8.29261 70.539 8.2197 70.8373 8.07386C71.1389 7.92803 71.3775 7.72254 71.5532 7.45739C71.7321 7.19223 71.8216 6.88068 71.8216 6.52273C71.8216 6.07528 71.6659 5.69579 71.3543 5.38423C71.0427 5.06937 70.5489 4.91193 69.8728 4.91193H67.5461V8.29261ZM76.5752 16.8636C76.3763 16.8636 76.199 16.8471 76.0432 16.8139C75.8874 16.7841 75.7797 16.7543 75.7201 16.7244L76.0184 15.6903C76.3034 15.7633 76.5553 15.7898 76.774 15.7699C76.9928 15.75 77.1867 15.6522 77.3557 15.4766C77.5281 15.3042 77.6855 15.0241 77.828 14.6364L78.0468 14.0398L75.2229 6.36364H76.4956L78.6036 12.4489H78.6831L80.7911 6.36364H82.0638L78.8223 15.1136C78.6765 15.508 78.4959 15.8345 78.2804 16.093C78.065 16.3549 77.8148 16.5488 77.5297 16.6747C77.248 16.8007 76.9298 16.8636 76.5752 16.8636Z"
                  fill="#64748B"
                />
              </svg>
              <select onChange={filterFunction}>
                <option>All</option>
                <option>Design</option>
                <option>Frontend</option>
                <option>Backend</option>
                <option>Blockchain</option>
                <option>Content</option>
              </select>
            </div>
          </div>
          <div className={styles.itemsDisplay}>
            {items.map((item) => (
              <WorkCard item={item} />
            ))}
          </div>
        </div>

        <div className={styles.aside}>
          <div className={styles.bountySearch}>
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M21.71 20.29L18 16.61C19.4401 14.8144 20.1375 12.5353 19.9488 10.2413C19.7601 7.94733 18.6997 5.81281 16.9855 4.27667C15.2714 2.74053 13.0338 1.91954 10.7329 1.9825C8.43207 2.04546 6.24275 2.98759 4.61517 4.61517C2.98759 6.24275 2.04546 8.43207 1.9825 10.7329C1.91954 13.0338 2.74053 15.2714 4.27667 16.9855C5.81281 18.6997 7.94733 19.7601 10.2413 19.9488C12.5353 20.1375 14.8144 19.4401 16.61 18L20.29 21.68C20.383 21.7738 20.4936 21.8482 20.6154 21.8989C20.7373 21.9497 20.868 21.9758 21 21.9758C21.132 21.9758 21.2627 21.9497 21.3846 21.8989C21.5065 21.8482 21.6171 21.7738 21.71 21.68C21.8903 21.4936 21.991 21.2444 21.991 20.985C21.991 20.7257 21.8903 20.4765 21.71 20.29ZM11 18C9.61556 18 8.26218 17.5895 7.11103 16.8203C5.95989 16.0511 5.06268 14.9579 4.53287 13.6788C4.00306 12.3997 3.86443 10.9923 4.13453 9.63439C4.40463 8.27653 5.07131 7.02925 6.05028 6.05028C7.02925 5.07131 8.27653 4.40463 9.63439 4.13453C10.9923 3.86443 12.3997 4.00306 13.6788 4.53287C14.9579 5.06268 16.0511 5.95989 16.8203 7.11103C17.5895 8.26218 18 9.61556 18 11C18 12.8565 17.2625 14.637 15.9498 15.9498C14.637 17.2625 12.8565 18 11 18Z"
                fill="#64758B"
              />
            </svg>
            <input
              className={styles.bountySearchInput}
              placeholder="Search Bounties, Profiles, and more..."
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
